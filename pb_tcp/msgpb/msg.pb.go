// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: msg.proto

/*
	Package msgpb is a generated protocol buffer package.

	It is generated from these files:
		msg.proto

	It has these top-level messages:
		Message
		Ack
		MessageBig
		AggregatedMetric
		StoragePolicy
		Resolution
		Retention
		RawMetric
*/
package msgpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Message struct {
	Offset int64  `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Value  []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptorMsg, []int{0} }

func (m *Message) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *Message) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type Ack struct {
	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *Ack) Reset()                    { *m = Ack{} }
func (m *Ack) String() string            { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()               {}
func (*Ack) Descriptor() ([]byte, []int) { return fileDescriptorMsg, []int{1} }

func (m *Ack) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type MessageBig struct {
	Offset1 int64  `protobuf:"varint,1,opt,name=offset1,proto3" json:"offset1,omitempty"`
	Offset2 int64  `protobuf:"varint,2,opt,name=offset2,proto3" json:"offset2,omitempty"`
	Offset3 int64  `protobuf:"varint,3,opt,name=offset3,proto3" json:"offset3,omitempty"`
	Offset4 int64  `protobuf:"varint,4,opt,name=offset4,proto3" json:"offset4,omitempty"`
	Offset5 int64  `protobuf:"varint,5,opt,name=offset5,proto3" json:"offset5,omitempty"`
	Offset6 int64  `protobuf:"varint,6,opt,name=offset6,proto3" json:"offset6,omitempty"`
	Offset7 int64  `protobuf:"varint,7,opt,name=offset7,proto3" json:"offset7,omitempty"`
	Offset8 int64  `protobuf:"varint,8,opt,name=offset8,proto3" json:"offset8,omitempty"`
	Offset9 int64  `protobuf:"varint,9,opt,name=offset9,proto3" json:"offset9,omitempty"`
	Value   []byte `protobuf:"bytes,10,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *MessageBig) Reset()                    { *m = MessageBig{} }
func (m *MessageBig) String() string            { return proto.CompactTextString(m) }
func (*MessageBig) ProtoMessage()               {}
func (*MessageBig) Descriptor() ([]byte, []int) { return fileDescriptorMsg, []int{2} }

func (m *MessageBig) GetOffset1() int64 {
	if m != nil {
		return m.Offset1
	}
	return 0
}

func (m *MessageBig) GetOffset2() int64 {
	if m != nil {
		return m.Offset2
	}
	return 0
}

func (m *MessageBig) GetOffset3() int64 {
	if m != nil {
		return m.Offset3
	}
	return 0
}

func (m *MessageBig) GetOffset4() int64 {
	if m != nil {
		return m.Offset4
	}
	return 0
}

func (m *MessageBig) GetOffset5() int64 {
	if m != nil {
		return m.Offset5
	}
	return 0
}

func (m *MessageBig) GetOffset6() int64 {
	if m != nil {
		return m.Offset6
	}
	return 0
}

func (m *MessageBig) GetOffset7() int64 {
	if m != nil {
		return m.Offset7
	}
	return 0
}

func (m *MessageBig) GetOffset8() int64 {
	if m != nil {
		return m.Offset8
	}
	return 0
}

func (m *MessageBig) GetOffset9() int64 {
	if m != nil {
		return m.Offset9
	}
	return 0
}

func (m *MessageBig) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type AggregatedMetric struct {
	RawMetric     *RawMetric     `protobuf:"bytes,1,opt,name=raw_metric,json=rawMetric" json:"raw_metric,omitempty"`
	StoragePolicy *StoragePolicy `protobuf:"bytes,2,opt,name=storage_policy,json=storagePolicy" json:"storage_policy,omitempty"`
}

func (m *AggregatedMetric) Reset()                    { *m = AggregatedMetric{} }
func (m *AggregatedMetric) String() string            { return proto.CompactTextString(m) }
func (*AggregatedMetric) ProtoMessage()               {}
func (*AggregatedMetric) Descriptor() ([]byte, []int) { return fileDescriptorMsg, []int{3} }

func (m *AggregatedMetric) GetRawMetric() *RawMetric {
	if m != nil {
		return m.RawMetric
	}
	return nil
}

func (m *AggregatedMetric) GetStoragePolicy() *StoragePolicy {
	if m != nil {
		return m.StoragePolicy
	}
	return nil
}

type StoragePolicy struct {
	Resolution *Resolution `protobuf:"bytes,1,opt,name=resolution" json:"resolution,omitempty"`
	Retention  *Retention  `protobuf:"bytes,2,opt,name=retention" json:"retention,omitempty"`
}

func (m *StoragePolicy) Reset()                    { *m = StoragePolicy{} }
func (m *StoragePolicy) String() string            { return proto.CompactTextString(m) }
func (*StoragePolicy) ProtoMessage()               {}
func (*StoragePolicy) Descriptor() ([]byte, []int) { return fileDescriptorMsg, []int{4} }

func (m *StoragePolicy) GetResolution() *Resolution {
	if m != nil {
		return m.Resolution
	}
	return nil
}

func (m *StoragePolicy) GetRetention() *Retention {
	if m != nil {
		return m.Retention
	}
	return nil
}

type Resolution struct {
	Window    int64 `protobuf:"varint,1,opt,name=window,proto3" json:"window,omitempty"`
	Precision int64 `protobuf:"varint,2,opt,name=precision,proto3" json:"precision,omitempty"`
}

func (m *Resolution) Reset()                    { *m = Resolution{} }
func (m *Resolution) String() string            { return proto.CompactTextString(m) }
func (*Resolution) ProtoMessage()               {}
func (*Resolution) Descriptor() ([]byte, []int) { return fileDescriptorMsg, []int{5} }

func (m *Resolution) GetWindow() int64 {
	if m != nil {
		return m.Window
	}
	return 0
}

func (m *Resolution) GetPrecision() int64 {
	if m != nil {
		return m.Precision
	}
	return 0
}

type Retention struct {
	Retention int64 `protobuf:"varint,1,opt,name=retention,proto3" json:"retention,omitempty"`
}

func (m *Retention) Reset()                    { *m = Retention{} }
func (m *Retention) String() string            { return proto.CompactTextString(m) }
func (*Retention) ProtoMessage()               {}
func (*Retention) Descriptor() ([]byte, []int) { return fileDescriptorMsg, []int{6} }

func (m *Retention) GetRetention() int64 {
	if m != nil {
		return m.Retention
	}
	return 0
}

type RawMetric struct {
	Id    []byte  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Nanos int64   `protobuf:"varint,2,opt,name=nanos,proto3" json:"nanos,omitempty"`
	Value float64 `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *RawMetric) Reset()                    { *m = RawMetric{} }
func (m *RawMetric) String() string            { return proto.CompactTextString(m) }
func (*RawMetric) ProtoMessage()               {}
func (*RawMetric) Descriptor() ([]byte, []int) { return fileDescriptorMsg, []int{7} }

func (m *RawMetric) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RawMetric) GetNanos() int64 {
	if m != nil {
		return m.Nanos
	}
	return 0
}

func (m *RawMetric) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*Message)(nil), "msgpb.Message")
	proto.RegisterType((*Ack)(nil), "msgpb.Ack")
	proto.RegisterType((*MessageBig)(nil), "msgpb.MessageBig")
	proto.RegisterType((*AggregatedMetric)(nil), "msgpb.AggregatedMetric")
	proto.RegisterType((*StoragePolicy)(nil), "msgpb.StoragePolicy")
	proto.RegisterType((*Resolution)(nil), "msgpb.Resolution")
	proto.RegisterType((*Retention)(nil), "msgpb.Retention")
	proto.RegisterType((*RawMetric)(nil), "msgpb.RawMetric")
}
func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.Offset))
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *Ack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ack) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.Offset))
	}
	return i, nil
}

func (m *MessageBig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageBig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Offset1 != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.Offset1))
	}
	if m.Offset2 != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.Offset2))
	}
	if m.Offset3 != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.Offset3))
	}
	if m.Offset4 != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.Offset4))
	}
	if m.Offset5 != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.Offset5))
	}
	if m.Offset6 != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.Offset6))
	}
	if m.Offset7 != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.Offset7))
	}
	if m.Offset8 != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.Offset8))
	}
	if m.Offset9 != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.Offset9))
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *AggregatedMetric) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggregatedMetric) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RawMetric != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.RawMetric.Size()))
		n1, err := m.RawMetric.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.StoragePolicy != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.StoragePolicy.Size()))
		n2, err := m.StoragePolicy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *StoragePolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoragePolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Resolution != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.Resolution.Size()))
		n3, err := m.Resolution.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Retention != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.Retention.Size()))
		n4, err := m.Retention.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *Resolution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Resolution) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Window != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.Window))
	}
	if m.Precision != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.Precision))
	}
	return i, nil
}

func (m *Retention) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Retention) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Retention != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.Retention))
	}
	return i, nil
}

func (m *RawMetric) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawMetric) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Nanos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMsg(dAtA, i, uint64(m.Nanos))
	}
	if m.Value != 0 {
		dAtA[i] = 0x19
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i += 8
	}
	return i, nil
}

func encodeVarintMsg(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Message) Size() (n int) {
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovMsg(uint64(m.Offset))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *Ack) Size() (n int) {
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovMsg(uint64(m.Offset))
	}
	return n
}

func (m *MessageBig) Size() (n int) {
	var l int
	_ = l
	if m.Offset1 != 0 {
		n += 1 + sovMsg(uint64(m.Offset1))
	}
	if m.Offset2 != 0 {
		n += 1 + sovMsg(uint64(m.Offset2))
	}
	if m.Offset3 != 0 {
		n += 1 + sovMsg(uint64(m.Offset3))
	}
	if m.Offset4 != 0 {
		n += 1 + sovMsg(uint64(m.Offset4))
	}
	if m.Offset5 != 0 {
		n += 1 + sovMsg(uint64(m.Offset5))
	}
	if m.Offset6 != 0 {
		n += 1 + sovMsg(uint64(m.Offset6))
	}
	if m.Offset7 != 0 {
		n += 1 + sovMsg(uint64(m.Offset7))
	}
	if m.Offset8 != 0 {
		n += 1 + sovMsg(uint64(m.Offset8))
	}
	if m.Offset9 != 0 {
		n += 1 + sovMsg(uint64(m.Offset9))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *AggregatedMetric) Size() (n int) {
	var l int
	_ = l
	if m.RawMetric != nil {
		l = m.RawMetric.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.StoragePolicy != nil {
		l = m.StoragePolicy.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *StoragePolicy) Size() (n int) {
	var l int
	_ = l
	if m.Resolution != nil {
		l = m.Resolution.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.Retention != nil {
		l = m.Retention.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *Resolution) Size() (n int) {
	var l int
	_ = l
	if m.Window != 0 {
		n += 1 + sovMsg(uint64(m.Window))
	}
	if m.Precision != 0 {
		n += 1 + sovMsg(uint64(m.Precision))
	}
	return n
}

func (m *Retention) Size() (n int) {
	var l int
	_ = l
	if m.Retention != 0 {
		n += 1 + sovMsg(uint64(m.Retention))
	}
	return n
}

func (m *RawMetric) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.Nanos != 0 {
		n += 1 + sovMsg(uint64(m.Nanos))
	}
	if m.Value != 0 {
		n += 9
	}
	return n
}

func sovMsg(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMsg(x uint64) (n int) {
	return sovMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ack) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageBig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageBig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageBig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset1", wireType)
			}
			m.Offset1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset1 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset2", wireType)
			}
			m.Offset2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset2 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset3", wireType)
			}
			m.Offset3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset3 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset4", wireType)
			}
			m.Offset4 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset4 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset5", wireType)
			}
			m.Offset5 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset5 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset6", wireType)
			}
			m.Offset6 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset6 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset7", wireType)
			}
			m.Offset7 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset7 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset8", wireType)
			}
			m.Offset8 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset8 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset9", wireType)
			}
			m.Offset9 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset9 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AggregatedMetric) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggregatedMetric: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggregatedMetric: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawMetric", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RawMetric == nil {
				m.RawMetric = &RawMetric{}
			}
			if err := m.RawMetric.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoragePolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StoragePolicy == nil {
				m.StoragePolicy = &StoragePolicy{}
			}
			if err := m.StoragePolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoragePolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoragePolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoragePolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resolution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resolution == nil {
				m.Resolution = &Resolution{}
			}
			if err := m.Resolution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retention", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Retention == nil {
				m.Retention = &Retention{}
			}
			if err := m.Retention.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Resolution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Resolution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Resolution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Window", wireType)
			}
			m.Window = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Window |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Precision", wireType)
			}
			m.Precision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Precision |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Retention) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Retention: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Retention: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retention", wireType)
			}
			m.Retention = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Retention |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawMetric) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawMetric: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawMetric: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nanos", wireType)
			}
			m.Nanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nanos |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMsg
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMsg(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMsg = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsg   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("msg.proto", fileDescriptorMsg) }

var fileDescriptorMsg = []byte{
	// 414 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0x4f, 0x8e, 0xd3, 0x30,
	0x14, 0xc6, 0x71, 0x42, 0x5b, 0xf2, 0xe6, 0x8f, 0x8a, 0x35, 0x42, 0x5e, 0x40, 0x34, 0xca, 0x6a,
	0xd8, 0x04, 0x4d, 0x3a, 0x33, 0x9d, 0x11, 0xab, 0x76, 0xc3, 0xaa, 0x12, 0x32, 0x07, 0xa8, 0xd2,
	0xc4, 0xb5, 0x2c, 0xda, 0x38, 0xb2, 0x53, 0x22, 0x76, 0x1c, 0x80, 0x03, 0x70, 0x24, 0x96, 0x1c,
	0x01, 0x95, 0x8b, 0xa0, 0x38, 0x7f, 0xec, 0x2e, 0x66, 0x97, 0xcf, 0xbf, 0xcf, 0xdf, 0xb3, 0xde,
	0x7b, 0x81, 0x60, 0xaf, 0x79, 0x5c, 0x2a, 0x59, 0x49, 0x3c, 0xda, 0x6b, 0x5e, 0x6e, 0xa2, 0x39,
	0x4c, 0x56, 0x4c, 0xeb, 0x94, 0x33, 0xfc, 0x06, 0xc6, 0x72, 0xbb, 0xd5, 0xac, 0x22, 0xe8, 0x1a,
	0xdd, 0xf8, 0xb4, 0x53, 0xf8, 0x0a, 0x46, 0xdf, 0xd2, 0xdd, 0x81, 0x11, 0xef, 0x1a, 0xdd, 0x9c,
	0xd3, 0x56, 0x44, 0xef, 0xc0, 0x5f, 0x64, 0x5f, 0x9f, 0xbb, 0x14, 0xfd, 0xf4, 0x00, 0xba, 0xe0,
	0xa5, 0xe0, 0x98, 0xc0, 0xa4, 0x05, 0xb7, 0x9d, 0xaf, 0x97, 0x96, 0x24, 0x26, 0x7f, 0x20, 0x89,
	0x25, 0x33, 0xe2, 0xbb, 0x64, 0x66, 0xc9, 0x1d, 0x79, 0xe9, 0x92, 0x3b, 0x4b, 0xee, 0xc9, 0xc8,
	0x25, 0xf7, 0x96, 0x3c, 0x90, 0xb1, 0x4b, 0x1e, 0x2c, 0x99, 0x93, 0x89, 0x4b, 0xe6, 0x96, 0x3c,
	0x92, 0x57, 0x2e, 0x79, 0xb4, 0xe4, 0x89, 0x04, 0x2e, 0x79, 0xb2, 0xdd, 0x02, 0xb7, 0x5b, 0x3f,
	0x10, 0x4c, 0x17, 0x9c, 0x2b, 0xc6, 0xd3, 0x8a, 0xe5, 0x2b, 0x56, 0x29, 0x91, 0xe1, 0x0f, 0x00,
	0x2a, 0xad, 0xd7, 0x7b, 0xa3, 0x4c, 0x5f, 0xce, 0x92, 0x69, 0x6c, 0xe6, 0x12, 0xd3, 0xb4, 0x6e,
	0x5d, 0x34, 0x50, 0xfd, 0x27, 0xfe, 0x08, 0x97, 0xba, 0x92, 0x2a, 0xe5, 0x6c, 0x5d, 0xca, 0x9d,
	0xc8, 0xbe, 0x9b, 0x96, 0x9d, 0x25, 0x57, 0xdd, 0xa5, 0x2f, 0x2d, 0xfc, 0x6c, 0x18, 0xbd, 0xd0,
	0xae, 0x8c, 0x14, 0x5c, 0x9c, 0x70, 0x7c, 0x0b, 0xa0, 0x98, 0x96, 0xbb, 0x43, 0x25, 0x64, 0xd1,
	0x95, 0x7f, 0xdd, 0x97, 0x1f, 0x00, 0x75, 0x4c, 0x38, 0x86, 0x40, 0xb1, 0x8a, 0x15, 0xe6, 0x86,
	0x77, 0xfa, 0xe0, 0xfe, 0x9c, 0x5a, 0x4b, 0xb4, 0x04, 0xb0, 0x49, 0xcd, 0xae, 0xd4, 0xa2, 0xc8,
	0x65, 0xdd, 0xef, 0x4a, 0xab, 0xf0, 0x5b, 0x08, 0x4a, 0xc5, 0x32, 0xa1, 0xfb, 0x54, 0x9f, 0xda,
	0x83, 0xe8, 0x3d, 0x04, 0x43, 0x76, 0x63, 0xb5, 0x0f, 0x68, 0x53, 0x9c, 0x72, 0x9f, 0x20, 0x18,
	0xfa, 0x86, 0x2f, 0xc1, 0x13, 0xb9, 0xf1, 0x9c, 0x53, 0x4f, 0xe4, 0xcd, 0x60, 0x8a, 0xb4, 0x90,
	0xba, 0xab, 0xd0, 0x0a, 0x3b, 0xae, 0x66, 0xc5, 0x50, 0x37, 0xae, 0xe5, 0xf4, 0xf7, 0x31, 0x44,
	0x7f, 0x8e, 0x21, 0xfa, 0x7b, 0x0c, 0xd1, 0xaf, 0x7f, 0xe1, 0x8b, 0xcd, 0xd8, 0xfc, 0x35, 0xb3,
	0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x07, 0xa0, 0xdb, 0x52, 0x42, 0x03, 0x00, 0x00,
}
